#!/usr/bin/env bash
#
# bootstrap installs things.

cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd)

set -e

echo ''

info () {
  printf "  [ \033[00;34m..\033[0m ] $1\n"
}

user () {
  printf "\r  [ \033[0;33m?\033[0m ] $1 "
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

setup_gitconfig () {
  if ! [ -f git/gitconfig.symlink ]
  then
    info 'setup gitconfig'

    git_credential='cache'
    if [ "$(uname -s)" == "Darwin" ]
    then
      git_credential='osxkeychain'
    fi

    os=$(os_name)
    if [[ $os = "Codespaces" ]]
    then
      git_authorname='crimsonknave'
      git_authoremail='crimsonknave@github.com'
    else
      user ' - What is your github author name?'
      read -e git_authorname
      user ' - What is your github author email?'
      read -e git_authoremail
    fi

    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" git/gitconfig.symlink.example > git/gitconfig.symlink

    success 'gitconfig'
  fi

  # Make sure to set verbose, gpgsign and mergetool to catch anything that already has got the gitconfig laid down
  # It's ignored as it's generated from the template and
  git config --global commit.gpgsign true
  git config --global commit.verbose true
  git config --global merge.tool vimdiff
}


link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]
      then

        skip=true;

      else

        user "File already exists: $(basename "$src"), what do you want to do? [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"

        os=$(os_name)
        if [[ $os = "Codespaces" ]]
        then
          info "Overwriting all files since we're in codespaces."
          action="O"
        else
          read -n 1 action
        fi

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    ln -s "$1" "$2"
    success "linked $1 to $2"
  fi
}

install_dotfiles () {
  info 'installing dotfiles'

  local overwrite_all=false backup_all=false skip_all=false

  for src in $(find "$DOTFILES_ROOT" -maxdepth 2 -name '*.symlink')
  do
    dst="$HOME/.$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done

  # install_awesome_config
  install_alacritty_config
  update_submodules
  run_vundle
  # download_powerline_symbols
  install_emoji_font
  # We need to generate to font cache so that we can use the patched fonts in the awesome widget
  generate_font_cache
  init_command_t
  setup_oh_my_zsh
  # Pip/python doesn't want you to use pip outside of a .venv
  # So, I'm supposed to install the linux packages for these
  # install_powerline
  # install_the_fuck
  # install_aws_cli
  # install_virtualenv
  os=$(os_name)
  if [[ $os != "Codespaces" ]]
  then
    install_github_stuffs
    install_shodan
    install_i3ipc
  fi
  #check_packages_are_installed

  success 'laid down dotfiles'
}

update_submodules () {
  info 'updating submodules'

  git submodule init
  git submodule update

  success 'submodules all loaded'
}

run_vundle () {
  info 'running vundle'

  vim +PluginInstall +qall
  vim +PluginUpdate +qall

  success 'vundle all set'
}

generate_font_cache () {
  info 'generating the font cache'

  set +e
  which fc-cache
  code=$?
  set -e
  if [[ $code -ne 0 ]]
  then
    info 'fc-cache not found, skipping'
    return
  fi

  fc-cache -vf
  success 're-generated the font cache'
}

init_command_t () {
  info 'initializing command t'

  # Check for ruby in vim and skip if it is missing
  set +e
  vim --version |grep +ruby > /dev/null
  code=$?
  set -e
  if [[ $code -ne 0 ]]
  then
    info 'Vim not compiled with ruby, skipping command t'
    return
  fi

  start_dir=`pwd`
  cd ~/.vim/bundle/Command-T/ruby/command-t/ext/command-t
  make clean
  /usr/bin/ruby extconf.rb
  make
  cd $start_dir
  success 'initialized command t'
}

setup_oh_my_zsh () {
  info "setting up oh-my-zsh\n"

  #############
  # Copied from the automatic install, but removed the changing shell as it was erroring
  # And removed the installing/backing up .zshrc, mine already has oh-my-zsh in it

  if [ ! -n "$ZSH" ]; then
    ZSH=~/.oh-my-zsh
  fi

  if [ -d "$ZSH" ]; then
    success "You already have Oh My Zsh installed. You'll need to remove $ZSH if you want to install"
    return
  fi

  info "Cloning Oh My Zsh..."
  hash git >/dev/null 2>&1 && /usr/bin/env git clone https://github.com/robbyrussell/oh-my-zsh.git $ZSH || {
    fail "git not installed"
  }

  success 'oh my zsh installed'
}

install_github_stuffs () {
  info 'installing ssh config for GitHub'

  src="$(pwd)/github/ssh_config"
  dst="$HOME/.ssh/config"
  link_file "$src" "$dst"
  success "linked $src to $dst"
}

install_alacritty_config () {
  info 'installing alacritty config file'

  mkdir -p ~/.config/alacritty
  src="$(pwd)/alacritty/alacritty.toml"
  dst="$HOME/.config/alacritty/alacritty.toml"
  link_file "$src" "$dst"
}

install_awesome_config () {
  info 'installing awesome config files'

  mkdir -p ~/.config/awesome
  src="$(pwd)/awesome/rc.lua"
  dst="$HOME/.config/awesome/rc.lua"
  link_file "$src" "$dst"

  src="$(pwd)/awesome/autorun.sh"
  dst="$HOME/.config/awesome/autorun.sh"
  link_file "$src" "$dst"
}

install_pip () {
  if [ `which pip` ];then
    info "skipping pip, it is installed\n"
    return
  fi

  info "installing pip\n"

  curl -o /tmp/get-pip.py 'https://bootstrap.pypa.io/get-pip.py'

  python /tmp/get-pip.py --user

  rm /tmp/get-pip.py

  success 'installed pip'
}

install_i3ipc () {
  info 'installing i3ipc'
  local_pip_install 'i3ipc'
  success 'installed i3ipc'
}

install_the_fuck () {
  info 'installing the fuck'
  local_pip_install 'thefuck'
  success 'installed the fuck'
}

install_virtualenv () {
  info 'installing virtualenv'
  local_pip_install 'virtualenv'
  success 'installed virtualenv'
}

install_aws_cli () {
  info 'installing aws cli'
  local_pip_install 'awscli'
  success 'installed aws cli'
}

install_shodan () {
  info 'installing shodan cli'
  local_pip_install 'shodan'
  success 'installed shodan cli'
}

os_name () {
  set +e
  uname -a |grep 'Darwin' > /dev/null
  mac=$?
  uname -a |grep 'Debian' > /dev/null
  deb=$?
  uname -a |grep 'codespaces' > /dev/null
  codespaces=$?
  set -e
  if [[ $mac -eq 0 ]]
  then
    echo 'OSX'
  elif [[ $deb -eq 0 ]]
  then
    echo 'Debian'
  elif [[ $codespaces -eq 0 ]]
  then
    echo 'Codespaces'
  else
    echo 'Other'
  fi
}

local_npm_install () {
  os=$(os_name)
  if [[ $os = "OSX" ]]
  then
    echo "npm on osx not implemented"
    exit 1
  else
    ~/.local/bin/pip install --user $1 --upgrade
  fi

}

local_pip_install () {
  os=$(os_name)
  if [[ $os = "OSX" ]]
  then
    ~/Library/Python/2.7/bin/pip install --user $1 --upgrade
  elif [[ $os = "Debian" ]]
  then
    /usr/bin/pip install --user $1 --upgrade
  else
    ~/.local/bin/pip install --user $1 --upgrade
  fi
}

set_tmux_powerline_config () {
  # python_version=$(python -c 'import sys;sys.stdout.write(".".join(sys.version.split(".")[0:2]))')
  python_version=$(python -c 'import sys;sys.stdout.write(sys.version[0:4].strip("."))')
  echo $python_version

  os=$(os_name)

  if [[ $os = "OSX" ]]
  then
    local_pip_install 'psutil'
    echo "source `ls ~/Library/Python/2.7/lib/python/site-packages/powerline/bindings/tmux/powerline.conf`" > ~/.tmux_powerline.conf
  else
    echo "source `ls /usr/lib/python$python_version/site-packages/powerline/bindings/tmux/powerline.conf`" > ~/.tmux_powerline.conf
  fi
}

install_powerline () {
  info 'installing powerline'

  install_pip

  # Installing package instead
  # local_pip_install 'powerline-status'
  local_pip_install 'powerline-kubernetes'

  set_tmux_powerline_config


  src="$(pwd)/powerline"
  dst="$HOME/.config/powerline"
  link_file "$src" "$dst"

  success 'installed powerline'
}

download_powerline_symbols () {
  info 'downloading the powerline symbols font'

  mkdir -p ~/.local/share/fonts
  mkdir -p ~/.config/fontconfig/conf.d

  curl -o ~/.local/share/fonts/PowerLineSymbols.otf 'https://raw.githubusercontent.com/Lokaltog/powerline/develop/font/PowerlineSymbols.otf'
  curl -o ~/.config/fontconfig/conf.d/10-powerline-symbols.conf 'https://raw.githubusercontent.com/Lokaltog/powerline/develop/font/10-powerline-symbols.conf'
}

install_emoji_font () {
  src="$(pwd)/fonts/20-emoji.conf"
  dst="$HOME/.config/fontconfig/conf.d/20-emoji.conf"
  link_file "$src" "$dst"
}


setup_gitconfig
install_dotfiles


# If we're on a Mac, let's install and setup homebrew.
if [ "$(uname -s)" == "Darwin" ]
then
  info "installing dependencies"
  if source bin/dot > /tmp/dotfiles-dot 2>&1
  then
    success "dependencies installed"
  else
    fail "error installing dependencies"
  fi
fi

echo ''
echo '  All installed!'
