#!/usr/bin/env bash
#
# bootstrap installs things.

cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd)

set -e

echo ''

info () {
  printf "  [ \033[00;34m..\033[0m ] $1\n"
}

user () {
  printf "\r  [ \033[0;33m?\033[0m ] $1 "
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

setup_gitconfig () {
  if ! [ -f git/gitconfig.symlink ]
  then
    info 'setup gitconfig'

    git_credential='cache'
    if [ "$(uname -s)" == "Darwin" ]
    then
      git_credential='osxkeychain'
    fi

    os=$(os_name)
    if [[ $os = "Codespaces" ]]
    then
      git_authorname='crimsonknave'
      git_authoremail='crimsonknave@github.com'
    else
      user ' - What is your github author name?'
      read -e git_authorname
      user ' - What is your github author email?'
      read -e git_authoremail
    fi

    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" git/gitconfig.symlink.example > git/gitconfig.symlink

    success 'gitconfig'
  fi

  # Make sure to set verbose, gpgsign and mergetool to catch anything that already has got the gitconfig laid down
  # It's ignored as it's generated from the template and
  git config --global commit.gpgsign true
  git config --global commit.verbose true
  git config --global merge.tool vimdiff
}


link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]
      then

        skip=true;

      else

        user "File already exists: $(basename "$src"), what do you want to do? [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"

        os=$(os_name)
        if [[ $os = "Codespaces" ]]
        then
          info "Overwriting all files since we're in codespaces."
          action="O"
        else
          read -n 1 action
        fi

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    ln -s "$1" "$2"
    success "linked $1 to $2"
  fi
}

install_dotfiles () {
  info 'installing dotfiles'

  local overwrite_all=false backup_all=false skip_all=false

  for src in $(find "$DOTFILES_ROOT" -maxdepth 2 -name '*.symlink')
  do
    dst="$HOME/.$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done

  os=$(os_name)
  if [[ $os != "Codespaces" ]]
  then
    check_packages_are_installed
  else
    install_github_stuffs
  fi
  setup_oh_my_zsh
  update_submodules
  install_alacritty_config
  install_kitty_config
  install_tmux_powerline_config
  install_foot_config
  install_starship_config
  install_bat_config
  # install_powerlevel10k_theme
  install_nvim_config
  install_sway_config
  install_waybar_config
  create_directories
	vundle_install
	vundle_update
	vundle_clean

  success 'laid down dotfiles'
}

create_directories () {
  info "Creating directories"
  mkdir -p $HOME/Screenshots
  success "Created directories"
}

build_yay () {
  info "Building yay"
  if [ `which yay` ];then
    success "Yay already installed"
    return
  fi
  sudo pacman -S --needed git base-devel
  cd /tmp
  git clone https://aur.archlinux.org/yay.git
  cd yay
  makepkg -si
  success "Yay built and installed"
}

check_package () {
  local package=$1
  needed_package=""
  set +e
  
  if ! pacman -Q $package &> /dev/null; then
    needed_package=" $package"
  fi
  set -e
  package_list="$package_list$needed_package"
}
check_packages_are_installed () {
  build_yay
  package_list=""
  check_package "1password"
  check_package "android-messages-desktop-bin"
  check_package "autojump"
  check_package "bat"
  check_package "clang"
  check_package "ctags"
  check_package "discord"
  check_package "docker"
  check_package "dunst"
  check_package "fd"
  check_package "firefox"
  check_package "font-manager"
  check_package "fzf"
  check_package "hatch"
  check_package "gimp"
  check_package "git"
  check_package "git-delta"
  check_package "gnome-calculator"
  check_package "google-chat-linux-bin"
  check_package "grimshot"
  check_package "gwenview"
  check_package "jq"
  check_package "lshw"
  check_package "lsof"
  check_package "man-db"
  check_package "pipenv"
  check_package "pipewire"
  check_package "playerctl"
  check_package "pwvucontrol"
  check_package "pyenv"
  check_package "rbenv"
  check_package "ripgrep"
  check_package "ruby-build"
  check_package "slack-desktop"
  check_package "spotify"
  check_package "starship"
  check_package "sway"
  check_package "sway-launcher-desktop"
  check_package "swayidle"
  check_package "swaylock"
  check_package "thefuck"
  check_package "the_silver_searcher"
  check_package "thunar"
  check_package "tmux"
  check_package "tmux-plugin-manager"
  check_package "traceroute"
  check_package "ttf-font-awesome"
  check_package "ttf-firacode-nerd"
  check_package "vim"
  check_package "waybar"
  check_package "wireplumber"
  check_package "xdg-desktop-portal-wlr"
  check_package "zoom"
  check_package "zsh"
  check_package "zsh-autosuggestions"
  check_package "zsh-completions"
  check_package "zsh-history-substring-search"
  check_package "zsh-syntax-highlighting"
  # check_package "zsh-theme-powerlevel10k"
  echo $package_list
  if [ ! -z "$package_list" ];then
    info "Installing missing packages"

    os=$(os_name)
    if [[ $os = "Ubuntu" ]]
    then
      install_string="apt install $package_list"
    else
      install_string="yay -Sy$package_list"
    fi
    echo $install_string
    $install_string
  fi
}

update_submodules () {
  info 'updating submodules'

  git submodule init
  git submodule update

  success 'submodules all loaded'
}

vundle_install () {
  info 'installing plugins via vundle'
  
  if [ `which nvim` ];then
    vim_bin="nvim"
  else
    vim_bin="vim"
  fi

  $vim_bin +PluginInstall +qall

  success 'plugins installed all set'
}
vundle_update () {
  info 'updating plugins via vundle'
  
  if [ `which nvim` ];then
    vim_bin="nvim"
  else
    vim_bin="vim"
  fi

  $vim_bin +PluginUpdate +qall

  success 'plugins updated'
}
vundle_clean () {
  info 'cleaning unused plugins via vundle'
  
  if [ `which nvim` ];then
    vim_bin="nvim"
  else
    vim_bin="vim"
  fi

  $vim_bin +PluginClean +qall

  success 'plugins cleaned'
}

setup_oh_my_zsh () {
  info "setting up oh-my-zsh\n"

  #############
  # Copied from the automatic install, but removed the changing shell as it was erroring
  # And removed the installing/backing up .zshrc, mine already has oh-my-zsh in it

  if [ ! -n "$ZSH" ]; then
    ZSH=~/.oh-my-zsh
  fi

  if [ -d "$ZSH" ]; then
    success "You already have Oh My Zsh installed. You'll need to remove $ZSH if you want to install"
    return
  fi

  info "Cloning Oh My Zsh..."
  hash git >/dev/null 2>&1 && /usr/bin/env git clone https://github.com/robbyrussell/oh-my-zsh.git $ZSH || {
    fail "git not installed"
  }

  success 'oh my zsh installed'
}

install_github_stuffs () {
  info 'installing ssh config for GitHub'

  src="$(pwd)/github/ssh_config"
  dst="$HOME/.ssh/config"
  link_file "$src" "$dst"
  success "linked $src to $dst"
}

# install_powerlevel10k_theme () {
#   info 'installing powerlevel10k theme'

#   src="$(pwd)/powerlevel10k"
#   dst="$HOME/.oh-my-zsh/custom/themes/powerlevel10k"
#   link_file "$src" "$dst"

# }

install_starship_config () {
  info 'installing starship config file'

  src="$(pwd)/starship/starship.toml"
  dst="$HOME/.config/starship.toml"
  link_file "$src" "$dst"
}

install_bat_config () {
  info 'installing bat config file'
  mkdir -p ~/.config/bat

  src="$(pwd)/bat/config"
  dst="$HOME/.config/bat/config"
  link_file "$src" "$dst"
}

install_tmux_powerline_config () {
  info 'installing starship config file'

  mkdir -p ~/.config/tmux-powerline/themes

  src="$(pwd)/tmux/tmux-powerline/config.sh"
  dst="$HOME/.config/tmux-powerline/config.sh"
  link_file "$src" "$dst"

  src="$(pwd)/tmux/tmux-powerline/themes/crimsonknave.sh"
  dst="$HOME/.config/tmux-powerline/themes/crimsonknave.sh"
  link_file "$src" "$dst"
}

install_foot_config () {
  info 'installing foot config file'

  mkdir -p ~/.config/foot

  for config in $(find "$DOTFILES_ROOT/foot" -maxdepth 1 -name '*.ini' -printf "%f\n")
  do
    src="$(pwd)/foot/$config"
    dst="$HOME/.config/foot/$config"
    link_file "$src" "$dst"
  done

}

install_kitty_config () {
  info 'installing kitty config file'

  mkdir -p ~/.config/kitty

  for config in $(find "$DOTFILES_ROOT/kitty" -maxdepth 1 -name '*.conf' -printf "%f\n")
  do
    src="$(pwd)/kitty/$config"
    dst="$HOME/.config/kitty/$config"
    link_file "$src" "$dst"
  done

}
install_alacritty_config () {
  info 'installing alacritty config file'

  mkdir -p ~/.config/alacritty

  for config in $(find "$DOTFILES_ROOT/alacritty" -maxdepth 1 -name '*.toml' -printf "%f\n")
  do
    src="$(pwd)/alacritty/$config"
    dst="$HOME/.config/alacritty/$config"
    link_file "$src" "$dst"
  done

}

install_nvim_config () {
  info 'installing neovim config file'

  mkdir -p ~/.config/nvim
  src="$(pwd)/vim/init.vim"
  dst="$HOME/.config/nvim/init.vim"
  link_file "$src" "$dst"
}

install_sway_config () {
  info 'installing sway config file'

  mkdir -p ~/.config/sway
  src="$(pwd)/sway/config"
  dst="$HOME/.config/sway/config"
  link_file "$src" "$dst"

  for script in $(find "$DOTFILES_ROOT/sway" -maxdepth 1 -name '*.sh' -printf "%f\n")
  do
    src="$(pwd)/sway/$script"
    dst="$HOME/.config/sway/$script"
    link_file "$src" "$dst"
  done

}

install_waybar_config () {
  info 'installing waybar config file'

  mkdir -p ~/.config/waybar
  # src="$(pwd)/sway/waybar/config"
  src="$(pwd)/sway/waybar/config-2"
  dst="$HOME/.config/waybar/config"
  link_file "$src" "$dst"

  # src="$(pwd)/sway/waybar/style.css"
  src="$(pwd)/sway/waybar/style-2.css"
  dst="$HOME/.config/waybar/style.css"
  link_file "$src" "$dst"
}

install_pip () {
  if [ `which pip` ];then
    info "skipping pip, it is installed\n"
    return
  fi

  info "installing pip\n"

  curl -o /tmp/get-pip.py 'https://bootstrap.pypa.io/get-pip.py'

  python /tmp/get-pip.py --user

  rm /tmp/get-pip.py

  success 'installed pip'
}

os_name () {
  set +e
  uname -a |grep 'Darwin' > /dev/null
  mac=$?
  uname -a |grep 'Debian' > /dev/null
  deb=$?
  uname -a |grep 'Ubuntu' > /dev/null
  ubuntu=$?
  uname -a |grep 'codespaces' > /dev/null
  codespaces=$?
  set -e
  if [[ $mac -eq 0 ]]
  then
    echo 'OSX'
  elif [[ $deb -eq 0 ]]
  then
    echo 'Debian'
  elif [[ $ubuntu -eq 0 ]]
  then
    echo 'Ubuntu'
  elif [[ $codespaces -eq 0 ]]
  then
    echo 'Codespaces'
  else
    echo 'Other'
  fi
}

local_npm_install () {
  os=$(os_name)
  if [[ $os = "OSX" ]]
  then
    echo "npm on osx not implemented"
    exit 1
  else
    ~/.local/bin/pip install --user $1 --upgrade
  fi

}

setup_gitconfig
install_dotfiles


# If we're on a Mac, let's install and setup homebrew.
if [ "$(uname -s)" == "Darwin" ]
then
  info "installing dependencies"
  if source bin/dot > /tmp/dotfiles-dot 2>&1
  then
    success "dependencies installed"
  else
    fail "error installing dependencies"
  fi
fi

echo ''
echo '  All installed!'
